name: Build and Publish Proto Artifacts

# Trigger workflow on push to master when .proto files change
on:
  push:
    branches:
      - master
#    paths:
#      - 'proto/**.proto'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    # GitHub Packages needs these permissions
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Step 2: Generate Proto Code using Docker (assumes Dockerfile exists in repo root)
      - name: Generate Code via Docker
        run: |
          docker build -t proto-builder .
          docker create --name temp-builder proto-builder
          docker cp temp-builder:/generated ./output
          docker rm temp-builder

      # Step 3: Set up Java (JDK 17) and configure Maven authentication for GitHub Packages
      - name: Set up JDK 17 and authenticate with GitHub Maven Packages
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

          # These credentials are used by Maven's deploy plugin internally
          server-id: github                     # This must match <id>github</id> in pom.xml
          server-username: ${{ github.actor }}  # GitHub username (injected automatically)
          server-password: ${{ secrets.GITHUB_TOKEN }}  # GitHub token (injected automatically)

      # Step 4: Publish Java artifact to GitHub Packages (jar)
      - name: Publish Java Artifact to GitHub Packages
        run: |
          cd output/java

          # Dynamically create a pom.xml file to describe the Java artifact
          cat <<EOF > pom.xml
          <project xmlns="http://maven.apache.org/POM/4.0.0"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example.proto</groupId>
            <artifactId>order-proto-java</artifactId>
            <version>1.0.${{ github.run_number }}</version>
            <packaging>jar</packaging>
            <name>Order Proto Java</name>
            <url>https://github.com/${{ github.repository }}</url>

            <dependencies>
              <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>3.25.3</version>
              </dependency>
            </dependencies>

            <build>
              <sourceDirectory>.</sourceDirectory>
            </build>

            <distributionManagement>
              <repository>
                <id>github</id> <!-- Must match server-id from setup-java -->
                <url>https://maven.pkg.github.com/${{ github.repository }}</url>
              </repository>
            </distributionManagement>
          </project>
          EOF

          # Build and deploy the JAR to GitHub Maven Packages
          mvn -X -B package deploy

      # Step 5: Set up Node.js and link to GitHub NPM registry
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/' # Important: no trailing space
          scope: '@${{ github.repository_owner }}'    # Ensures scoped package name is correct

      # Step 6: Publish TypeScript proto code to GitHub NPM Packages
      - name: Publish TypeScript Artifact to GitHub Packages
        run: |
          cd output/ts

          # Create temporary .npmrc file to authenticate with GitHub NPM registry
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc

          # Dynamically generate package.json for the TypeScript proto package
          cat <<EOF > package.json
          {
            "name": "@${{ github.repository_owner }}/order-proto-ts",
            "version": "1.0.${{ github.run_number }}",
            "main": "order_pb.js",
            "types": "order_pb.d.ts",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/${{ github.repository }}.git"
            },
            "publishConfig": {
              "registry": "https://npm.pkg.github.com/"
            },
            "peerDependencies": {
              "google-protobuf": "^3.21.2"
            }
          }
          EOF

          # Publish to GitHub NPM registry
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Used by .npmrc to authenticate
